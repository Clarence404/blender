diff --git a/pxr/usd/usdMtlx/reader.cpp b/pxr/usd/usdMtlx/reader.cpp
index f04ab07ac1..aa4d1e65de 100644
--- a/pxr/usd/usdMtlx/reader.cpp
+++ b/pxr/usd/usdMtlx/reader.cpp
@@ -9,6 +9,7 @@
 #include "pxr/usd/usdMtlx/reader.h"
 #include "pxr/usd/usdMtlx/utils.h"
 
+#include "pxr/usd/usdGeom/metrics.h"
 #include "pxr/usd/usdGeom/primvar.h"
 #include "pxr/usd/usdGeom/primvarsAPI.h"
 #include "pxr/usd/usdShade/material.h"
@@ -740,11 +741,11 @@ _NodeGraphBuilder::Build(ShaderNamesByOutputName* outputs)
         return UsdPrim();
     }
 
-    const bool isInsideNodeGraph = _mtlxContainer->isA<mx::NodeGraph>();
+    const bool isExplicitNodeGraph = _mtlxContainer->isA<mx::NodeGraph>();
 
     // Create the USD nodegraph.
     UsdPrim usdPrim;
-    if (isInsideNodeGraph) {
+    if (isExplicitNodeGraph) {
         // Create the nodegraph.
         auto usdNodeGraph = UsdShadeNodeGraph::Define(_usdStage, _usdPath);
         if (!usdNodeGraph) {
@@ -769,7 +770,7 @@ _NodeGraphBuilder::Build(ShaderNamesByOutputName* outputs)
         }
     }
     else {
-        usdPrim = _usdStage->DefinePrim(_usdPath);
+        usdPrim = UsdShadeNodeGraph::Define(_usdStage, _usdPath).GetPrim();
     }
 
     // Build the graph of nodes.
@@ -783,19 +784,7 @@ _NodeGraphBuilder::Build(ShaderNamesByOutputName* outputs)
         _AddNode(mtlxNode, usdPrim);
     }
     _ConnectNodes();
-
-    if (isInsideNodeGraph) {
-        _ConnectTerminals(_mtlxContainer, UsdShadeConnectableAPI(usdPrim));
-    }
-    else if (outputs) {
-        // Collect the outputs on the existing shader nodes.
-        for (mx::OutputPtr& mtlxOutput :
-                _mtlxContainer->getChildrenOfType<mx::Output>()) {
-            if (auto nodeName = _Attr(mtlxOutput, names.nodename)) {
-                (*outputs)[_Name(mtlxOutput)] = TfToken(nodeName);
-            }
-        }
-    }
+    _ConnectTerminals(_mtlxContainer, UsdShadeConnectableAPI(usdPrim));
 
     return usdPrim;
 }
@@ -2623,6 +2612,13 @@ UsdMtlxRead(
     // Translate all materials.
     ReadMaterials(mtlxDoc, context);
 
+    if (!mtlxDoc->getChildren().empty()) {
+        // This metadata is required to pass usdchecker
+        UsdGeomSetStageUpAxis(stage, UsdGeomGetFallbackUpAxis());
+        UsdGeomSetStageMetersPerUnit(stage, UsdGeomLinearUnits::centimeters);
+        stage->SetDefaultPrim(stage->GetPrimAtPath(internalPath));
+    }
+
     // If there are no looks then we're done.
     if (mtlxDoc->getLooks().empty()) {
         return;
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.py b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.py
index 6ced1a4d05..ce7dd20673 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.py
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.py
@@ -116,17 +116,51 @@ def test_MultiBindInputs(self):
         # Make sure each input is connected as expected
         inputToSource = {
             'weight_1':
-            '/MaterialX/Materials/layered/NodeGraphs/layered_layer1_gradient',
+                ('/MaterialX/Materials/layered/NodeGraphs','o_layered_layer1_gradient'),
             'weight_2':
-            '/MaterialX/Materials/layered/NodeGraphs/layered_layer2_gradient',
+                ('/MaterialX/Materials/layered/NodeGraphs','o_layered_layer2_gradient'),
             'weight_3':
-            '/MaterialX/Materials/layered/NodeGraphs/layered_layer3_gradient'
+                ('/MaterialX/Materials/layered/NodeGraphs','o_layered_layer3_gradient')
         }
         for inputName, source in inputToSource.items():
             input = nodeGraph.GetInput(inputName)
             self.assertEqual(input.HasConnectedSource(), True)
             self.assertEqual(
-                input.GetConnectedSources()[0][0].source.GetPath(), source)
+                input.GetConnectedSources()[0][0].source.GetPath(), source[0])
+            self.assertEqual(
+                input.GetConnectedSources()[0][0].sourceName, source[1])
+
+    def test_OutputSources(self):
+        """
+        Test MaterialX conversion of shader inputs coming from a variety of
+        output sources.
+        """
+        stage = UsdMtlx._TestFile("OutputSources.mtlx")
+        path = Sdf.Path('/MaterialX/Materials/layered/layered_sr')
+        node = UsdShade.Shader.Get(stage, path)
+
+        # Make sure each input is connected as expected
+        inputToSource = {
+            'weight_1': (
+                '/MaterialX/Materials/layered/test_ng',
+                'o_layered_layer1_gradient'
+            ),
+            'weight_2': (
+                '/MaterialX/Materials/layered/NodeGraphs',
+                'o_layered_layer2_gradient'
+            ),
+            'weight_3': (
+                '/MaterialX/Materials/layered/NodeGraphs/layered_layer3_gradient',
+                'out'
+            )
+        }
+        for inputName, source in inputToSource.items():
+            input = node.GetInput(inputName)
+            self.assertEqual(input.HasConnectedSource(), True)
+            self.assertEqual(
+                input.GetConnectedSources()[0][0].source.GetPath(), source[0])
+            self.assertEqual(
+                input.GetConnectedSources()[0][0].sourceName, source[1])
 
     def test_MultiOutputNodes(self):
         """
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/OutputSources.mtlx b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/OutputSources.mtlx
new file mode 100644
index 0000000000..d216f4dc76
--- /dev/null
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/OutputSources.mtlx
@@ -0,0 +1,27 @@
+<?xml version="1.0"?>
+<materialx version="1.38">
+  <nodegraph name="test_ng">
+    <ramplr name="layered_layer1_gradient" type="color3" />
+    <output name="o_layered_layer1_gradient" type="color3" nodename="layered_layer1_gradient" />
+  </nodegraph>
+  <ramplr name="layered_layer2_gradient" type="color3" />
+  <output name="o_layered_layer2_gradient" type="color3" nodename="layered_layer2_gradient" />
+  <ramplr name="layered_layer3_gradient" type="color3" />
+  <nodedef name="ND_layerShader" node="layerShader">
+    <input name="weight_1" type="color3" />
+    <input name="weight_2" type="color3" />
+    <input name="weight_3" type="color3" />
+    <output name="out" type="surfaceshader" />
+  </nodedef>
+  <layerShader name="layered_sr" type="surfaceshader">
+    <!-- An output coming from within an "explicit" node graph. -->
+    <input name="weight_1" type="color3" nodegraph="test_ng" output="o_layered_layer1_gradient" />
+    <!-- An output coming from an "output" outside of an explicit node graph. -->
+    <input name="weight_2" type="color3" output="o_layered_layer2_gradient" />
+    <!-- A direct connection to a node's 'out'. -->
+    <input name="weight_3" type="color3" nodename="layered_layer3_gradient" />
+  </layerShader>
+  <surfacematerial name="layered" type="material">
+    <input name="surfaceshader" type="surfaceshader" nodename="layered_sr" />
+  </surfacematerial>
+</materialx>
\ No newline at end of file
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/CustomNodeDef.usda b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/CustomNodeDef.usda
index c4e6b0aa41..f2f4417924 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/CustomNodeDef.usda
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/CustomNodeDef.usda
@@ -1,4 +1,9 @@
 #usda 1.0
+(
+    defaultPrim = "MaterialX"
+    metersPerUnit = 0.01
+    upAxis = "Y"
+)
 
 def "MaterialX"
 {
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/GraphlessNodes.usda b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/GraphlessNodes.usda
index 19515599dc..625610f233 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/GraphlessNodes.usda
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/GraphlessNodes.usda
@@ -1,4 +1,9 @@
 #usda 1.0
+(
+    defaultPrim = "MaterialX"
+    metersPerUnit = 0.01
+    upAxis = "Y"
+)
 
 def "MaterialX"
 {
@@ -59,7 +64,7 @@ def "MaterialX"
         }
     }
 
-    def "NodeGraphs"
+    def NodeGraph "NodeGraphs"
     {
         def Shader "redClorVal"
         {
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include.usda b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include.usda
index e19a3164e0..cfdcd9791e 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include.usda
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include.usda
@@ -4,6 +4,9 @@
     customLayerData = {
         string colorSpace = "acescg"
     }
+    defaultPrim = "MaterialX"
+    metersPerUnit = 0.01
+    upAxis = "Y"
 )
 
 def "MaterialX"
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include_From_Usdz.usda b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include_From_Usdz.usda
index e19a3164e0..cfdcd9791e 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include_From_Usdz.usda
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Include_From_Usdz.usda
@@ -4,6 +4,9 @@
     customLayerData = {
         string colorSpace = "acescg"
     }
+    defaultPrim = "MaterialX"
+    metersPerUnit = 0.01
+    upAxis = "Y"
 )
 
 def "MaterialX"
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Looks.usda b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Looks.usda
index e19a3164e0..cfdcd9791e 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Looks.usda
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/Looks.usda
@@ -4,6 +4,9 @@
     customLayerData = {
         string colorSpace = "acescg"
     }
+    defaultPrim = "MaterialX"
+    metersPerUnit = 0.01
+    upAxis = "Y"
 )
 
 def "MaterialX"
diff --git a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/usd_preview_surface_gold.usda b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/usd_preview_surface_gold.usda
index c1feb635f2..d279cfd3ff 100644
--- a/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/usd_preview_surface_gold.usda
+++ b/pxr/usd/usdMtlx/testenv/testUsdMtlxFileFormat.testenv/baseline/usd_preview_surface_gold.usda
@@ -1,4 +1,9 @@
 #usda 1.0
+(
+    defaultPrim = "MaterialX"
+    metersPerUnit = 0.01
+    upAxis = "Y"
+)
 
 def "MaterialX"
 {
